(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(537),r=t.n(o),a=t(645),l=t.n(a),i=t(667),s=t.n(i),c=new URL(t(36),t.b),d=new URL(t(836),t.b),A=l()(r()),p=s()(c),m=s()(d);A.push([e.id,"@font-face {\n    font-family: 'myfont1';\n    src: url("+p+");\n}\n\n@font-face {\n    font-family: 'myfont2';\n    src: url("+m+");\n    \n}\nbody {\n    margin: 0px;\n}\n\n.container {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 1rem;\n    background-color: #F9F3EE;\n    margin: 0px;\n    height: 100vh;\n}\n\n.header {\n    font-family: myfont1, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    color: #3d6e61;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n\n.sidebar {\n    margin: 5px;\n    display: flex;\n    flex-direction: column;\n    width: 20vw;\n    min-width: 150px;\n    background-color: #e9e2dd;\n    padding: 3px;\n    border-radius: 5px;\n    gap: 3px;\n}\n\n.sidebarElement {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.right-panel {\n    width: 100%;\n    margin: 5px;\n}\n\n\n.addfolder {\n    width: 100%;\n    background-color: #97C4B8;\n}\n\n.content {\n    display: flex;\n    flex-direction: row;\n}\n.folder {\n    display: flex;\n    flex-direction: row;\n    margin-left: 10px;\n}\n\n.folder-div {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    width: 100%;\n    gap: 3px;\n}\n\n.tasks {\n    text-align: center;\n    background-color: #e9e2dd;\n    border-radius: 5px;\n}\n\n.task-details-3, .first-line-3 {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr;\n}\n\n.active-folder{\n    display: none;\n}\n\n.task-details-2, .first-line-2 {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n}\n\n.tasks > div:first-child {\n    border-bottom: hotpink solid 1px;\n}\n\n.first-line-2 {\n    padding-left: 30px;\n    padding-right: 60px;\n}\n\n.first-line-3 {\n    padding-left: 30px;\n    padding-right: 60px;\n}\n\n\n.tasks > div:last-child {\n    border-bottom: none;\n}\n\n.task-input-div {\n    display: flex;\n}\n\nbutton {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    cursor: pointer;\n    border: 1px solid ;\n    border-radius: 5px;\n}\n\n/* GRID */\n.default-prio, .urgent-prio, .done{\n    display: grid;\n    /* justify-content: space-between; */\n    /* align-items: center; */\n    grid-template-columns: 30px auto 30px 30px;\n    grid-template-areas:  \"checkbox-area task-text task-del-btn change-prio\";\n}\n\ninput[type=\"checkbox\"] {\n    grid-area: checkbox-area;\n    max-width: 15px;\n    flex: 0;\n    border-radius: 5px;\n}\n.default-prio >div, .urgent-prio > div, .done > div {\n    grid-area: task-text;\n}\n\n.default-prio >div {\n    color: black;\n}\n\n.urgent-prio > div {\n    color: red;\n}\n\n.done > .task-details-2, .done > .task-details-3 {\n    color: gray;\n    position: relative;\n}\n\n\n/* line through tasks that are already done */\n.done > .task-details-2:before, .done > .task-details-3:before {\n    color: gray;\n    position:absolute;\n    content: \"\";\n    width: 100%;\n    border-radius: 50px;\n    border-bottom: rgb(170, 170, 170) 1px solid;\n    top: 50%;\n    \n}\n\n.delBtn {\n    background-color: rgb(226, 174, 174);\n\n}\n\n.taskDelBtn {\n    grid-area: task-del-btn;\n}\n\n.change-prio {\n    grid-area: change-prio;\n}\n/* img */\n.taskDelBtn, .change-prio, .change-prio-1{\n    display: block;\n    cursor: pointer;\n    margin: auto;\n    max-width: 1rem;\n    height: 1rem;\n}\n\n.change-prio-1 {\n    filter: invert(13%) sepia(88%) saturate(6429%) hue-rotate(359deg) brightness(111%) contrast(116%);\n}\n\n.input-div {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    width: 100%;\n}\n\ninput {\n    flex: 1;\n}\n\n\n\n.folderBtn, .active-folderBtn {\n    width: 100%;\n}\n\n.folderBtn {\n    background-color: #CCF3EE;\n}\n\n.active-folderBtn {\n    background-color: #F9CEEE;\n}\n\n.default-prio-btn {\n    background-color: #CCF3EE;\n}\n\n.urgent-prio-btn {\n    background-color: #F9CEEE;\n}\n\n\nfooter {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    position: fixed;\n    font-size: max(0.40rem ,0.8vw);\n    bottom: 0;\n    width: 100vw;\n    display: flex;\n    height: var(--footerheight);\n    justify-content: center;\n    border-top: 1px solid black;\n    align-items: center;\n    gap: 20px;\n    background-color: #383838;\n    opacity: 0.9;\n    color: #CCF3EE;\n}\n\n.footer-img {\n    filter: invert(82%) sepia(56%) saturate(102%) hue-rotate(113deg) brightness(107%) contrast(91%);\n}\n\n.footer-img:hover {\n    transition: transform 0.3s ease-in-out;\n    transform: rotate(360deg) scale(1.4);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,4CAA8B;AAClC;;AAEA;IACI,sBAAsB;IACtB,4CAA8B;;AAElC;AACA;IACI,WAAW;AACf;;AAEA;IACI,iJAAiJ;IACjJ,eAAe;IACf,yBAAyB;IACzB,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,iJAAiJ;IACjJ,cAAc;IACd,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,gBAAgB;IAChB,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,WAAW;IACX,WAAW;AACf;;;AAGA;IACI,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,OAAO;IACP,WAAW;IACX,QAAQ;AACZ;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;AACvB;;;AAGA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,iJAAiJ;IACjJ,eAAe;IACf,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA,SAAS;AACT;IACI,aAAa;IACb,oCAAoC;IACpC,yBAAyB;IACzB,0CAA0C;IAC1C,wEAAwE;AAC5E;;AAEA;IACI,wBAAwB;IACxB,eAAe;IACf,OAAO;IACP,kBAAkB;AACtB;AACA;IACI,oBAAoB;AACxB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,WAAW;IACX,kBAAkB;AACtB;;;AAGA,6CAA6C;AAC7C;IACI,WAAW;IACX,iBAAiB;IACjB,WAAW;IACX,WAAW;IACX,mBAAmB;IACnB,2CAA2C;IAC3C,QAAQ;;AAEZ;;AAEA;IACI,oCAAoC;;AAExC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;AAC1B;AACA,QAAQ;AACR;IACI,cAAc;IACd,eAAe;IACf,YAAY;IACZ,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,iGAAiG;AACrG;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;IACP,WAAW;AACf;;AAEA;IACI,OAAO;AACX;;;;AAIA;IACI,WAAW;AACf;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;;AAGA;IACI,iJAAiJ;IACjJ,eAAe;IACf,8BAA8B;IAC9B,SAAS;IACT,YAAY;IACZ,aAAa;IACb,2BAA2B;IAC3B,uBAAuB;IACvB,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,yBAAyB;IACzB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,+FAA+F;AACnG;;AAEA;IACI,sCAAsC;IACtC,oCAAoC;AACxC",sourcesContent:["@font-face {\n    font-family: 'myfont1';\n    src: url('./assets/font1.ttf');\n}\n\n@font-face {\n    font-family: 'myfont2';\n    src: url('./assets/font2.ttf');\n    \n}\nbody {\n    margin: 0px;\n}\n\n.container {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    font-size: 1rem;\n    background-color: #F9F3EE;\n    margin: 0px;\n    height: 100vh;\n}\n\n.header {\n    font-family: myfont1, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    color: #3d6e61;\n    font-size: 2rem;\n    margin-bottom: 1rem;\n}\n\n.sidebar {\n    margin: 5px;\n    display: flex;\n    flex-direction: column;\n    width: 20vw;\n    min-width: 150px;\n    background-color: #e9e2dd;\n    padding: 3px;\n    border-radius: 5px;\n    gap: 3px;\n}\n\n.sidebarElement {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.right-panel {\n    width: 100%;\n    margin: 5px;\n}\n\n\n.addfolder {\n    width: 100%;\n    background-color: #97C4B8;\n}\n\n.content {\n    display: flex;\n    flex-direction: row;\n}\n.folder {\n    display: flex;\n    flex-direction: row;\n    margin-left: 10px;\n}\n\n.folder-div {\n    display: flex;\n    flex-direction: row;\n    flex: 1;\n    width: 100%;\n    gap: 3px;\n}\n\n.tasks {\n    text-align: center;\n    background-color: #e9e2dd;\n    border-radius: 5px;\n}\n\n.task-details-3, .first-line-3 {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr;\n}\n\n.active-folder{\n    display: none;\n}\n\n.task-details-2, .first-line-2 {\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n}\n\n.tasks > div:first-child {\n    border-bottom: hotpink solid 1px;\n}\n\n.first-line-2 {\n    padding-left: 30px;\n    padding-right: 60px;\n}\n\n.first-line-3 {\n    padding-left: 30px;\n    padding-right: 60px;\n}\n\n\n.tasks > div:last-child {\n    border-bottom: none;\n}\n\n.task-input-div {\n    display: flex;\n}\n\nbutton {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    cursor: pointer;\n    border: 1px solid ;\n    border-radius: 5px;\n}\n\n/* GRID */\n.default-prio, .urgent-prio, .done{\n    display: grid;\n    /* justify-content: space-between; */\n    /* align-items: center; */\n    grid-template-columns: 30px auto 30px 30px;\n    grid-template-areas:  \"checkbox-area task-text task-del-btn change-prio\";\n}\n\ninput[type=\"checkbox\"] {\n    grid-area: checkbox-area;\n    max-width: 15px;\n    flex: 0;\n    border-radius: 5px;\n}\n.default-prio >div, .urgent-prio > div, .done > div {\n    grid-area: task-text;\n}\n\n.default-prio >div {\n    color: black;\n}\n\n.urgent-prio > div {\n    color: red;\n}\n\n.done > .task-details-2, .done > .task-details-3 {\n    color: gray;\n    position: relative;\n}\n\n\n/* line through tasks that are already done */\n.done > .task-details-2:before, .done > .task-details-3:before {\n    color: gray;\n    position:absolute;\n    content: \"\";\n    width: 100%;\n    border-radius: 50px;\n    border-bottom: rgb(170, 170, 170) 1px solid;\n    top: 50%;\n    \n}\n\n.delBtn {\n    background-color: rgb(226, 174, 174);\n\n}\n\n.taskDelBtn {\n    grid-area: task-del-btn;\n}\n\n.change-prio {\n    grid-area: change-prio;\n}\n/* img */\n.taskDelBtn, .change-prio, .change-prio-1{\n    display: block;\n    cursor: pointer;\n    margin: auto;\n    max-width: 1rem;\n    height: 1rem;\n}\n\n.change-prio-1 {\n    filter: invert(13%) sepia(88%) saturate(6429%) hue-rotate(359deg) brightness(111%) contrast(116%);\n}\n\n.input-div {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    width: 100%;\n}\n\ninput {\n    flex: 1;\n}\n\n\n\n.folderBtn, .active-folderBtn {\n    width: 100%;\n}\n\n.folderBtn {\n    background-color: #CCF3EE;\n}\n\n.active-folderBtn {\n    background-color: #F9CEEE;\n}\n\n.default-prio-btn {\n    background-color: #CCF3EE;\n}\n\n.urgent-prio-btn {\n    background-color: #F9CEEE;\n}\n\n\nfooter {\n    font-family: myfont2, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    position: fixed;\n    font-size: max(0.40rem ,0.8vw);\n    bottom: 0;\n    width: 100vw;\n    display: flex;\n    height: var(--footerheight);\n    justify-content: center;\n    border-top: 1px solid black;\n    align-items: center;\n    gap: 20px;\n    background-color: #383838;\n    opacity: 0.9;\n    color: #CCF3EE;\n}\n\n.footer-img {\n    filter: invert(82%) sepia(56%) saturate(102%) hue-rotate(113deg) brightness(107%) contrast(91%);\n}\n\n.footer-img:hover {\n    transition: transform 0.3s ease-in-out;\n    transform: rotate(360deg) scale(1.4);\n}"],sourceRoot:""}]);const u=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(l[s]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&l[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),l=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(l).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},l=[],i=0;i<e.length;i++){var s=e[i],c=o.base?s[0]+o.base:s[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var p=t(A),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var u=r(m,o);o.byIndex=i,n.splice(i,0,{identifier:A,updater:u,references:1})}l.push(A)}return l}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=t(a[l]);n[i].references--}for(var s=o(e,r),c=0;c<a.length;c++){var d=t(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},36:(e,n,t)=>{e.exports=t.p+"3a8f808b6d8bd38172e5.ttf"},836:(e,n,t)=>{e.exports=t.p+"59d0dfb89814c205ae6d.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),l=t.n(a),i=t(565),s=t.n(i),c=t(216),d=t.n(c),A=t(589),p=t.n(A),m=t(426),u={};u.styleTagTransform=p(),u.setAttributes=s(),u.insert=l().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=d(),n()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;const f=function(e){if(null==e)document.querySelector(".active-folder").innerHTML="All";else{let n=document.getElementsByClassName("active-folderBtn");for(let e=0;e<n.length;e++)n[e].className="folderBtn";e.className="active-folderBtn",document.querySelector(".active-folder").innerHTML=e.textContent,console.log(e)}},g=t.p+"ecf329c2c06a1f41fae4.png";function h(){localStorage.removeItem("taskName"),localStorage.removeItem("priority"),localStorage.removeItem("taskFolder"),localStorage.removeItem("date"),localStorage.removeItem("done");let e=[],n=[],t=[],o=[],r=[];for(let a=0;a<E.length;a++)e.push(E[a].taskName),n.push(E[a].priority),t.push(E[a].folder),o.push(E[a].date),r.push(E[a].done);localStorage.setItem("taskName",JSON.stringify(e)),localStorage.setItem("priority",JSON.stringify(n)),localStorage.setItem("taskFolder",JSON.stringify(t)),localStorage.setItem("date",JSON.stringify(o)),localStorage.setItem("done",JSON.stringify(r))}const C=function(e,n,t,o){t?n?n&&(E[e].done=!0,h()):(E[e].done=!1,h()):E[e].done?E[e].done&&alert("This task is already done!"):(0===E[e].priority?(E[e].priority=1,o.className="change-prio-1"):(E[e].priority=0,o.className="change-prio"),E[e].done=!1,h())},I=function(e,n){console.log("start: "+n),n.splice(e,1),console.log("end: "+n),h()},y=function(){console.log("clearing tasks"),document.querySelector(".tasks").innerHTML=""},v=t.p+"28d6b1c635e186ad5401.png",b=t.p+"45ef21660b12824eafda.png";function k(e){if(console.log("temp? "+e.innerText),console.log(E),document.querySelector(".active-folder"),"All"==e.innerText){B();for(let e=0;e<E.length;e++)S(e,!0)}else if("Prio"==e.innerText){B();for(let e=0;e<E.length;e++)1==E[e].priority&&0==E[e].done&&S(e,!0)}else if("Done"==e.innerText){B();for(let e=0;e<E.length;e++)1==E[e].done&&S(e,!0)}else{!function(){const e=document.querySelector(".tasks"),n=document.createElement("div");n.className="first-line-2",e.appendChild(n),n.innerHTML=" <div>Task name</div>\n                            <div>Date</div>"}();for(let n=0;n<E.length;n++)E[n].folder==e.innerText&&S(n,!1)}}function B(){const e=document.querySelector(".tasks"),n=document.createElement("div");n.className="first-line-3",e.appendChild(n),n.innerHTML=" <div>Task name</div>\n                            <div>Folder</div> \n                            <div>Date</div>"}function S(e,n){if(n){let n=document.createElement("div");n.id=e,document.querySelector(".tasks").appendChild(n);const t=document.createElement("input");t.type="checkbox",t.class="checkbox-class",n.appendChild(t),1==E[e].done?(n.className="done",t.checked=!0):0==E[e].done&&0==E[e].priority?(n.className="default-prio",t.checked=!1):0==E[e].done&&1==E[e].priority&&(n.className="urgent-prio",t.checked=!1),t.addEventListener("change",(function(){this.checked?(C(this.parentElement.id,!0,!0,this),y(),k(document.querySelector(".active-folder"))):(C(this.parentElement.id,!1,!0,this),y(),k(document.querySelector(".active-folder")))}));const o=document.createElement("div");o.className="task-details-3",o.innerHTML=`   <div>${E[e].taskName}</div>\n                                    <div>${E[e].folder}</div> \n                                    <div>${E[e].date}</div>`,n.appendChild(o);const r=document.createElement("img");0==E[e].priority?r.className="change-prio":r.className="change-prio-1",r.src=v,n.appendChild(r),r.addEventListener("click",(function(){console.log(this.parentElement),C(this.parentElement.id,!1,!1,this),y(),k(document.querySelector(".active-folder"))}));const a=document.createElement("img");a.className="taskDelBtn",a.src=b,n.appendChild(a),a.addEventListener("click",(function(){E[e].folder,I(this.parentElement.id,E),y(),k(document.querySelector(".active-folder"))}))}else{let n=document.createElement("div");n.id=e,document.querySelector(".tasks").appendChild(n);const t=document.createElement("input");t.type="checkbox",t.class="checkbox-class",n.appendChild(t),1==E[e].done?(n.className="done",t.checked=!0):0==E[e].done&&0==E[e].priority?(n.className="default-prio",t.checked=!1):0==E[e].done&&1==E[e].priority&&(n.className="urgent-prio",t.checked=!1),t.addEventListener("change",(function(){this.checked?(C(this.parentElement.id,!0,!0,this),y(),k(document.querySelector(".active-folder"))):(C(this.parentElement.id,!1,!0,this),y(),k(document.querySelector(".active-folder")))}));const o=document.createElement("div");o.className="task-details-2",o.innerHTML=`   <div>${E[e].taskName}</div>\n                                    <div>${E[e].date}</div>`,n.appendChild(o);const r=document.createElement("img");0==E[e].priority?r.className="change-prio":r.className="change-prio-1",r.src=v,n.appendChild(r),r.addEventListener("click",(function(){console.log(this.parentElement),C(this.parentElement.id,!1,!1,this),y(),k(document.querySelector(".active-folder"))}));const a=document.createElement("img");a.className="taskDelBtn",a.src=b,n.appendChild(a),a.addEventListener("click",(function(){E[e].folder,I(this,E),y(),k(document.querySelector(".active-folder"))}))}}const x=k,E=[];class N{constructor(e,n,t,o,r){return this.taskName=e,this.priority=n,this.folder=t,this.date=o,this.done=r,`${e}, ${n}, ${t}, ${o}, ${r}`}}const w=function e(){if(console.log(localStorage),null!==localStorage.getItem("taskName")&&JSON.parse(localStorage.getItem("taskName")).length>0)for(let e=0;e<JSON.parse(localStorage.getItem("taskName")).length;e++)E[e]=new N(JSON.parse(localStorage.getItem("taskName"))[e],JSON.parse(localStorage.getItem("priority"))[e],JSON.parse(localStorage.getItem("taskFolder"))[e],JSON.parse(localStorage.getItem("date"))[e],JSON.parse(localStorage.getItem("done"))[e]);let n=0;for(const e in E)console.log("- "+E[e].taskName+" - "+E[e].folder+" - "+E[e].date);const t=document.querySelector(".interF");let o=document.querySelector(".addTask");o&&t.removeChild(o);const r=document.querySelector(".tasks"),a=document.createElement("div");a.className="task-input-div",t.appendChild(a);const l=document.createElement("input");l.className="input-field",a.appendChild(l);const i=document.createElement("input");i.type="date",i.className="date-input",a.appendChild(i);const s=document.createElement("button");s.innerText="prio",s.className="default-prio-btn",a.appendChild(s),s.addEventListener("click",(function(){"default-prio-btn"==this.className?(this.className="urgent-prio-btn",n=1):(this.className="default-prio-btn",n=0)}));const c=document.createElement("button");c.innerText="ok",a.appendChild(c),c.addEventListener("click",(function(){if(""!==l.value&&""!==i.value){const o=document.querySelector(".active-folder");console.log("date---: "+i.value),E[E.length]=new N(l.value,n,o.textContent,i.value,0),localStorage.removeItem("taskName"),localStorage.removeItem("priority"),localStorage.removeItem("taskFolder"),localStorage.removeItem("date"),localStorage.removeItem("done");let s=[],c=[],d=[],A=[],p=[];for(let e=0;e<E.length;e++)s.push(E[e].taskName),c.push(E[e].priority),d.push(E[e].folder),A.push(E[e].date),p.push(E[e].done);localStorage.setItem("taskName",JSON.stringify(s)),localStorage.setItem("priority",JSON.stringify(c)),localStorage.setItem("taskFolder",JSON.stringify(d)),localStorage.setItem("date",JSON.stringify(A)),localStorage.setItem("done",JSON.stringify(p)),t.removeChild(a);const m=document.querySelector(".active-folder");r.innerHTML="",x(m);let u=document.createElement("button");u.innerHTML="Add new task",u.className="addTask",t.appendChild(u),u.addEventListener("click",(function(){e()}))}else alert("Task name and date can not be empty!")}))},O=function(e){console.log(J);for(let n=0;n<E.length;n++)E[n].folder==e&&(console.log("before:"),console.log(E),E.splice(n,1),console.log("after:"),console.log(E),h())},T=function(e,n){if(confirm("If you delete a folder, it will delete all tasks in the folder! Do you want to continue?")){console.log(e.parentElement);let t=e.parentElement.id;if("active-folderBtn"==e.parentElement.firstChild.className){const e=document.querySelector(".active-folder");e.innerHTML="All",document.getElementsByClassName("folderBtn")[0].className="active-folderBtn",y(),x(e)}console.log("start: "+n),n.splice(t,1),localStorage.removeItem("folders");let o=[];for(let e=0;e<n.length;e++)o.push(n[e]);localStorage.setItem("folders",JSON.stringify(o)),console.log(localStorage),JSON.parse(localStorage.getItem("folders")),O(e.parentElement.firstChild.innerHTML),y();let r=document.querySelector(".active-folder");x(r)}};let J=[];function L(e){if(console.log(localStorage),null!==localStorage.getItem("folders")&&(console.log("json: "+JSON.parse(localStorage.getItem("folders")).length),JSON.parse(localStorage.getItem("folders")).length>0))for(let e=0;e<JSON.parse(localStorage.getItem("folders")).length;e++)J[e]=JSON.parse(localStorage.getItem("folders"))[e];let n=document.querySelector("#folder");n.removeChild(e);const t=document.createElement("div");t.className="input-div",n.appendChild(t);const o=document.createElement("input");o.className="input-field",t.appendChild(o);const r=document.createElement("button");r.innerText="ok",t.appendChild(r),r.addEventListener("click",(function(){if(""!==o.value){let e=o.value;J.push(e),console.log(localStorage),localStorage.removeItem("folders");let a=[];for(let e=0;e<J.length;e++)a.push(J[e]);localStorage.setItem("folders",JSON.stringify(a)),console.log(localStorage);let l=JSON.parse(localStorage.getItem("folders"));console.log(l[0]),t.removeChild(o),t.removeChild(r),q(n,J)}else alert("Folder name can not be empty!")}))}function q(e,n){console.log(n.length);let t=document.querySelector(".active-folder").textContent;F();for(let o=0;o<n.length;o++){const r=document.createElement("div");r.className="folder-div",r.id=e.childElementCount,e.appendChild(r);const a=document.createElement("button");a.innerText=n[o],a.className="folderBtn",n[o]==t&&(a.className="active-folderBtn"),a.addEventListener("click",(function(){f(this),y(),x(this);const e=document.querySelector(".interF");let n=document.querySelector(".addTask");n&&e.removeChild(n),n=document.createElement("button"),n.innerHTML="Add new task",n.className="addTask",e.appendChild(n),n.addEventListener("click",(function(){w()}))})),r.appendChild(a);const l=document.createElement("button");l.className="delBtn",l.innerHTML="&times;",r.appendChild(l),l.addEventListener("click",(function(){T(this,n),q(e,n)}))}document.querySelector(".addfolder");const o=document.querySelector("#folder"),r=document.createElement("button");r.className="addfolder",r.innerText="Add new folder",o.appendChild(r),r.addEventListener("click",(function(){L(this)}))}function F(){folder.innerHTML=""}if(document.querySelector(".container"),function(){const e=document.querySelector(".container"),n=document.createElement("div");n.className="header",n.innerHTML="Todo List",e.appendChild(n);const t=document.createElement("div");t.className="content",e.appendChild(t);const o=document.createElement("div");o.className="sidebar",o.innerHTML='\n    <button class="active-folderBtn">All</button>\n    <button class="folderBtn">Done</button>\n    <button class="folderBtn">Prio</button>\n    <div class="sidebarElement">Folders:</div>\n    <div class="sidebarElement" id="folder">\n    <button class="addfolder">new folder</button>\n    </div>\n    ',t.appendChild(o);const r=document.createElement("div");r.className="right-panel",t.appendChild(r);const a=document.createElement("div");a.className="active-folder",r.appendChild(a),f();const l=document.createElement("div");l.className="interF",r.appendChild(l);const i=document.createElement("div");i.className="tasks",l.appendChild(i);const s=document.createElement("button");s.innerHTML="Add new task",s.className="addTask",l.appendChild(s),function(){const e=document.querySelector(".container"),n=document.createElement("footer");n.innerHTML=`<p>Copyright © 2022 zsoltizbekk</p>\n    <a href="https://github.com/zsoltizbekk" target="_blank"><img class="footer-img" src="${g}" alt="github" width="20px" height="20px"></a>`,e.appendChild(n)}()}(),null!==localStorage.getItem("folders")&&JSON.parse(localStorage.getItem("folders")).length>0){for(let e=0;e<JSON.parse(localStorage.getItem("folders")).length;e++)J[e]=JSON.parse(localStorage.getItem("folders"))[e];q(document.querySelector("#folder"),J)}if(null!==localStorage.getItem("taskName")){if(JSON.parse(localStorage.getItem("taskName")).length>0)for(let e=0;e<JSON.parse(localStorage.getItem("taskName")).length;e++)E[e]=new N(JSON.parse(localStorage.getItem("taskName"))[e],JSON.parse(localStorage.getItem("priority"))[e],JSON.parse(localStorage.getItem("taskFolder"))[e],JSON.parse(localStorage.getItem("date"))[e],JSON.parse(localStorage.getItem("done"))[e]);document.querySelector(".tasks"),document.querySelector(".active-folder");const e=document.querySelector(".active-folder");x(e)}document.querySelector(".addfolder").addEventListener("click",(function(){L(this)}));const M=document.querySelectorAll(".folderBtn, .active-folderBtn");for(let e=0;e<M.length;e++)M[e].addEventListener("click",(function(){if(f(this),y(),x(this),"Done"===this.innerHTML||"Prio"===this.innerHTML){console.log("???");let e=document.querySelector(".addTask");document.querySelector(".interF").removeChild(e)}else{const e=document.querySelector(".interF");let n=document.querySelector(".addTask");if(n&&e.removeChild(n),"task-input-div"==e.lastChild.className){let n=document.querySelector(".task-input-div");e.removeChild(n)}n=document.createElement("button"),n.innerHTML="Add new task",n.className="addTask",e.appendChild(n),n.addEventListener("click",(function(){w()}))}}));document.querySelector(".addTask").addEventListener("click",(function(){w()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,